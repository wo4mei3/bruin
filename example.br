fn func<S>(e:Option<S>) -> S {
    let ptr:fn (Option<S>) -> S = fn func<S>;
}

struct Obj<T> {
   field:T;
}

enum Option<T> {
  Some(T);
  None;
}


impl Obj {
    fn (Self*) method<T>(x:int, arr:int[]) -> T  {
        let ptr:int* = 0;
        while a> b {
        }
        for i in l {
        }
        switch e {
            case _ : {
                
            }
        }
        
    }
}
