
trait trait1 {
    fn new<T>() -> Self;
    fn (Self) method<T>() -> T;
}

struct struct1 {
   field:T1;
}

enum enum1 {
  Tag1(T1,T2);
}

impl<T> Monads for T where T:Applicative {
  ...
}


impl Obj {
    fn (Self*) method<T>(x:int, arr:int[10]) -> T  {
        let ptr:int* = 0;
        while b {
            ...
        }
        for i in l {
            ...
        }
        let cls:fn(int) -> () = fn (a:int) -> () {
            ...
        }
        switch e {
            case _: {
                
            }
        }
    } 
}